#!/usr/bin/python
# -*- coding: UTF-8 -*-
### 查询下载小说

import sys, argparse
from tempfile import TemporaryFile  # , NamedTemporaryFile
from lib.Biququ import search, get_chapters, get_chapter_content

# 1. 读取
rstFile = TemporaryFile(mode="w+")
keyword = ''
file = ''


def parseArgs(argv):
    parser = argparse.ArgumentParser()
    parser.description = '参数解析'
    parser.add_argument('-k', '--keyword', required=True, help='搜索关键字')
    parser.add_argument('-f', '--file', required=True, help='待搜索的日志文件')
    args = parser.parse_args()

    global keyword, file
    keyword = args.keyword
    file = args.file
    print('keyword:', keyword)
    print('file:', file)


class Book:
    name = "未知"  # 书名
    cover_url = ''  # 封面URL
    description = ""  # 简介
    author = "未知"  # 作者
    contents = []  # 目录
    latest_chapter = []  # 最新章节
    novel_url = ''  # 小说链接


if __name__ == '__main__':

    parseArgs(sys.argv[1:])
    print('keyword:', keyword)
    print('file:', file)

    # 0. 创建一个书籍类
    book = Book()

    keyword = '顶级气运'
    # 1. 搜索小说，返回搜索结果
    search_res = search(keyword)
    print(search_res)

    # 2. 默认选择第一个结果，返回结果的书籍信息
    book_info = search_res[0]
    print(book_info)

    # 3. 写入书籍信息
    book.name = book_info["书名"]
    book.author = book_info["作者"]
    book.description = book_info["简介"]
    book.cover_url = book_info["封面URL"]
    book.novel_url = book_info["小说链接"]

    # 4. 根据小说链接解析目录，返回目录列表
    chapters = get_chapters(book.novel_url)
    book.contents = chapters
    print(chapters)

    # 5. 遍历小说目录链接，解析正文，返回正文段落列表
    fo = open(keyword + ".txt", "w")
    for id, chapter in enumerate(book.contents):
        print("处理章节: " + chapter['章节名'])
        url = chapter["章节链接"]
        context = get_chapter_content(url)
        book.contents[id]["正文"] = context
        fo.write(chapter['章节名'] + "\n")
        fo.write("".join(context) + "\n\n")
    print("执行完成")
