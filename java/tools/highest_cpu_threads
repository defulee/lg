#!/bin/bash
### Find out the highest cpu consumed threads of java, and print the stack of these threads.

#
# @Usage
#   $ tb trace_java_threads
#

readonly cmd=$(basename $0)
readonly -a full_cmd=("$0" "$@")

usage() {
    cat <<EOF
Usage: ${cmd} [OPTION]...
Find out the highest cpu consumed threads of java, and print the stack of these threads.
Example: ${cmd} -p 1234 -c 10

Options:
    -p      pid, find out the highest cpu consumed threads from the specifed java process,
    -c      count, set the thread count to show, default is 5
    -h      help, display this help and exit
EOF
    exit $1
}

while getopts "c:p:h" opt; do
    case "$opt" in
    c)
        count="$OPTARG"
        ;;
    p)
        pid="$OPTARG"
        ;;
    h)
        usage
        ;;
    \?)
        echo "Invalid option: -$OPTARG"
        ;;
    esac
done
count=${count:-5}

error() {
    [ -c /dev/stdout ] && {
        # if stdout is console, turn on color output.
        echo -ne "\033[1;31m"
        echo -n "$@"
        echo -e "\033[0m"
    } || echo "$@"
}

step() {
    [ -c /dev/stdout ] && {
        # if stdout is console, turn on color output.
        echo -ne "\033[1;36m"
        echo -n "$@"
        echo -e "\033[0m"
    } || echo "$@"
}

# Check pid
[ -z "$pid" ] && {
    error "Error: pid parameter is not setup"
    usage 1
}

# Check the existence of jstack command!
if ! command -v jstack &>/dev/null; then
    [ -z "$JAVA_HOME" ] && {
        error "Error: JAVA_HOME is not setup"
        exit 1
    }
    ! [ -f "$JAVA_HOME/bin/jstack" ] && {
        error "Error: $JAVA_HOME/bin/jstack does not exists!"
        exit 1
    }
    ! [ -x "$JAVA_HOME/bin/jstack" ] && {
        error "Error: $JAVA_HOME/bin/jstack is not executalbe!"
        exit 1
    }
    export PATH="$JAVA_HOME/bin:$PATH"
fi

readonly uuid=$(date +%s)_${RANDOM}_$$
jstack_log=/tmp/${uuid}_${pid}

cleanup() {
    rm /tmp/${uuid}_* &>/dev/null
}
trap "cleanup" EXIT

jstack_process() {
    [ ! -f "${jstack_log}" ] && {
        jstack ${pid} >${jstack_log}
    }

    [ ! -f "${jstack_log}" ] && {
        error "Fail to stack of java process(${pid}) under user(${USER})."
        exit 1
    }
}

print_thread_stack() {
    local line
    while IFS=" " read -a line; do
        local pid=${line[0]}
        local tid=${line[1]}
        local tid_hex="0x$(printf %x ${tid})"
        local user=${line[2]}
        local pcpu=${line[4]}

        jstack_process

        step "pcpu(${pcpu}%) thread(${tid}/${tid_hex}) stack of java process(${pid}) under user(${user}):"
        sed "/nid=${tid_hex} /,/^$/p" -n ${jstack_log}
    done
}

ps -Leo pid,lwp,user,command,%cpu --no-headers |
    awk -v "pid=${pid}" '{if($1==pid)print $0}' |
    sort -k5 -nr | head -n "${count}" |
    print_thread_stack
