#!/bin/bash

### 统计数据出现频次，并以直方图显示

# load common libs functions
current_dir=$(dirname "$(echo "$0" | sed -e '')")
source ${current_dir}/../lib/common-functions

function usage() {
cat << EOF
$(fmt_bold USAGE)
st $(basename $0) [options] [pattern] [file]       stats data

$(fmt_bold DESCRIPTION)
stats data use regex show by histogram
[file] the file from which to statistics are collected. if the file is not specified, it will collect statistics for data from $(fmt_ul stdin).

The pattern default is *extended* regex.
$(fmt_bold Options):
  -d, --dir              the directory that find jar files, default is current directory.
                         this option can specify multiply times to find in multiply directory.
  -E, --extended-regexp  PATTERN is an extended regular expression (*default*)
  -F, --fixed-strings    PATTERN is a set of newline-separated strings
  -G, --basic-regexp     PATTERN is a basic regular expression
  -P, --perl-regexp      PATTERN is a Perl regular expression
  -r                     user raw data for histogram
  -h, --help             display this help and exit
    

$(fmt_bold NOTE)
1. The file supports both plain text file and $(fmt_bold gzipped) file (with $(fmt_bold .gz) suffix).

EOF
}

function stats() {
    if [ "${regex_mode}" == "-ro" ];then
        sort | histogram -s
    elif [ "${regex_mode}" == "-Ro" ];then
        sort | histogram -p
    else
        grep ${regex_mode} "${pattern}" | sort | uniq -c | sort -nr | histogram -s
    fi
}

function stats_from_stream() {
    temp_file=$(mktemp)
    sort -n > "${temp_file}"

    lines="$(wc -l "${temp_file}" | awk '{print $1}')"
    stats "${lines}" < "${temp_file}" 
    rm -f "${temp_file}"
}

# parse options
args=()
regex_mode=-E
while [ $# -gt 0 ]; do
    case "$1" in
    -E|--extended-regexp)
        regex_mode=-E
        shift
        ;;
    -F|--fixed-strings)
        regex_mode=-F
        shift
        ;;
    -G|--basic-regexp)
        regex_mode=-G
        shift
        ;;
    -P|--perl-regexp)
        regex_mode=-P
        shift
        ;;
    -r)
        regex_mode=-r
        shift
        ;;
    -R)
        regex_mode=-R
        shift
        ;;
    -h|--help)
        usage
        ;;
    *)
        args=("${args[@]}" "$1")
        shift
        ;;
    esac
done

readonly regex_mode="${regex_mode}o"

[ "${#args[@]}" -lt 1 ] && { echo "not specify a pattern used during the match of the input!" 1>&2 ; usage; }
readonly pattern="${args[0]}"
file="${args[1]}"
if [ "${regex_mode}" == "-ro" ] || [ "${regex_mode}" == "-Ro" ];then
    file="${args[0]}"
fi

if [ -n "${file}" ]; then
    if [ -r "${file}" ]; then
        scat "${file}" | stats_from_stream
    else
        echo "${file} is not readable"
        exit 1
    fi
else
    stats_from_stream
fi
